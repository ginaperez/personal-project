{"version":3,"sources":["redux/reducer.js","redux/store.js","components/Header/Header.js","components/Landing/Landing.js","api.js","components/Auth/AuthComponent.js","components/Purchase History/PurchaseHistoryComponent.js","App.js","serviceWorker.js","index.js"],"names":["initialState","user","SET_USER","setUser","type","payload","createStore","state","action","applyMiddleware","promiseMiddleware","mapDispatchToProps","invokedConnect","connect","reduxState","props","useState","show","setShow","toggler","className","onClick","src","image","alt","email","to","title","setSidebar","axios","delete","then","Landing","this","changeTitle","React","Component","API","login","register","session","logout","inventory","search","orders","purchaseHistory","cart","checkout","AuthComponent","registerEmail","registerPassword","loginEmail","loginPassword","user_id","bind","post","password","setState","data","loggedInUser","console","log","onSubmit","e","preventDefault","value","onChange","target","PurchaseHistoryComponent","getPurchaseHistory","get","purchaseHistoryResponse","purchaseHistoryItem","map","i","purchase_id","purchase_date","transaction_id","item_id","item_name","item_qty","item_unit_price","total_price","width","App","exact","path","render","withRouter","Boolean","window","location","hostname","match","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0accb03.chunk.js","sourcesContent":["const initialState = {\n    user: null\n};\n\nexport const SET_USER = \"SET_USER\";\n\nexport default function reducer(state = initialState, action) {\n    const { type, payload } = action;\n    switch(type) {\n        case SET_USER:\n            return { user: payload };\n        default:\n            return state;\n    }\n}\n\nexport function setUser(user) {\n    return {\n        type: SET_USER,\n        payload: user\n    };\n}\n","import reducer from './reducer';\nimport { createStore, applyMiddleware } from 'redux';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nexport default createStore(reducer, applyMiddleware(promiseMiddleware));","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setUser } from '../../redux/reducer';\nimport axios from 'axios';\nimport './Header.scss';\n\nfunction Header(props) {\n    const [ show, setShow ] = useState(false);\n\n    const toggler = () => {\n        setShow(!show);\n    };\n\n    return (\n        <div className='header-main'>\n            <div className='header-contents'>\n                <span className='navbar'>\n                    {props.user ? (\n                        <button className='toggler' onClick={toggler}>\n                            <img className='toggle-img' src={props.user.image} alt={`${props.user.email} Image`} />\n                        </button>\n                    ) : (\n                        <NavLink className='nav' to='/login'>\n                            {props.title}\n                        </NavLink>\n                    )}\n\n                    {props.user && (\n                        <div className={show ? 'show' : \"\"}>\n                            <NavLink className='nav' onClick={() => toggler()} to='/purchase_histo'>\n                                Purchase History\n                            </NavLink>\n                            <NavLink className='nav' onClick={() => {\n                                toggler();\n                                props.setSidebar(false);\n                            }}\n                            to='/profile'>\n                                My Account\n                            </NavLink>\n                            <button className='logout' onClick={() => {\n                                axios.delete('/auth/logout').then(() => {\n                                    props.setUser(null);\n                                });\n                                toggler();\n                            }}>\n                            Logout\n                        </button>\n                        </div>\n                    )}\n                </span>\n            </div>\n        </div>\n    );\n}\n\nfunction mapReduxStateToProps(reduxState) {\n    return reduxState;\n}\n\nconst mapDispatchToProps = {\n    setUser,\n};\n\nconst invokedConnect = connect(mapReduxStateToProps, mapDispatchToProps);\n\nexport default invokedConnect(Header);","import React from 'react';\nimport './Landing.scss';\n\nexport default class Landing extends React.Component {\n    componentDidMount() {\n        this.props.changeTitle('Login');\n    }\n    render() {\n        return (\n            <div className='landing-main'>\n                <div className='picture-element'>\n                    <div className='header-container'>\n                        <h1>Furniture Store</h1>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","const API = {\n\tlogin: '/api/login',\n\tregister: '/api/register',\n\tsession: '/api/session',\n\tlogout: '/api/logout',\n\tinventory: '/api/inventory',\n\tsearch: '/api/search',\n\torders: '/api/orders',\n\tpurchaseHistory: '/api/purchaseHistory',\n\tcart: '/api/cart',\n\tcheckout: '/api/checkout'\n}\n\nexport default API;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport API from '../../api';\nimport { connect } from 'react-redux';\nimport { setUser } from '../../redux/reducer';\nimport App from '../../App';\nimport { withRouter } from 'react-router-dom';\n\nclass AuthComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            registerEmail: \"\",\n\t\t\tregisterPassword: \"\",\n\t\t\tloginEmail: \"\",\n\t\t\tloginPassword: \"\",\n\t\t\tsession: {\n\t\t\t\temail: \"\",\n\t\t\t\tuser_id: null\n\t\t\t}\n        }\n        this.register = this.register.bind(this);\n\t\tthis.login = this.login.bind(this);\n\t\tthis.logout = this.logout.bind(this);\n    }\n\n    async register() {\n        const { registerEmail, registerPassword } = this.state;\n        const session = await axios.post(API.register, {\n            email: registerEmail,\n            password: registerPassword\n        });\n        this.setState({ session: session.data });\n    }\n    \n    async login() {\n        const { loginEmail, loginPassword } = this.state;\n        const loggedInUser = await axios.post(API.login, {\n            email: loginEmail,\n            password: loginPassword\n        });\n        this.props.setUser(loggedInUser.data);\n        console.log(loggedInUser)\n    }\n    \n    async logout() {\n        const { session } = this.state;\n        const destroyedSession = await axios.post(API.logout, {});\n    \n        this.setState({ session: { email: \"\", user_id: null } });\n    }\n    \n\n    render() {\n        const { loginEmail, loginPassword, registerEmail, registerPassword, } = this.state;\n        return (\n            <div className=\"main-area\">\n            <div className='auth-container'>\n                <form onSubmit={e => { e.preventDefault(); this.login(); }}>\n                    <div className='login-input-container'>\n                        <label>Email: </label>\n                        <input type=\"email\" value={loginEmail} onChange={(e) => this.setState({ loginEmail: e.target.value })} />\n                    </div>\n                    <div className='login-input-container'>\n                        <label>Password: </label>\n                        <input type=\"password\" value={loginPassword} onChange={(e) => this.setState({ loginPassword: e.target.value })} />\n                    </div>\n                    <button className=\"login-input-button\">Login</button>\n                </form>\n                <form onSubmit={e => { e.preventDefault(); this.register(); }}>\n                    <div className=\"register-input-container\">\n                        <label>Email: </label>\n                        <input type=\"email\" value={registerEmail} onChange={(e) => this.setState({ registerEmail: e.target.value })} />\n                    </div>\n                    <div className=\"register-input-container\">\n                        <label>Password: </label>\n                        <input type=\"password\" value={registerPassword} onChange={(e) => this.setState({ registerPassword: e.target.value })} />\n                    </div>\n                    <button className=\"register-input-button\">Register</button>\n                </form>\n            </div>\n            </div>\n        )\n    }\n}\n\nfunction mapReduxStateToProps(reduxState) {\n\treturn reduxState\n}\n\nconst mapDispatchToProps = {\n\tsetUser\n};\n\nconst invokedConnect = connect(mapReduxStateToProps, mapDispatchToProps)\n\nexport default invokedConnect(AuthComponent);\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport API from '../../api';\n\nclass PurchaseHistoryComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            purchaseHistory: []\n        }\n        this.getPurchaseHistory = this.getPurchaseHistory.bind(this);\n    }\n\n    componentDidMount() {\n        this.getPurchaseHistory();\n    }\n\n    async getPurchaseHistory() {\n\t\tconst purchaseHistoryResponse = await axios.get(`${API.purchaseHistory}`)\n\n\t\tthis.setState({ purchaseHistory: purchaseHistoryResponse.data });\n    }\n    \n    render() {\n        const { purchaseHistoryItem } = this.state;\n        return (\n            <div className=\"purchase-history\">\n                {/* <button className=\"wide-element\" onClick={() => this.getPurchaseHistory()}>Purchase History</button> */}\n                {\n                    this.state.purchaseHistory.map((purchaseHistoryItem, i) => {\n                        return (\n                            <div className=\"purchase-history-details\">\n                                <p>Purchase ID: {purchaseHistoryItem.purchase_id}</p>\n                                <p>Purchase date: {purchaseHistoryItem.purchase_date}</p>\n                                <p>Transaction ID: {purchaseHistoryItem.transaction_id}</p>\n                                <p>User ID: {purchaseHistoryItem.user_id}</p>\n                                <p>Item ID: {purchaseHistoryItem.item_id}</p>\n                                <p>Item Name: {purchaseHistoryItem.item_name}</p>\n                                <p>Item Qty: {purchaseHistoryItem.item_qty}</p>\n                                <p>Item Unit Price: {purchaseHistoryItem.item_unit_price}</p>\n                                <p>Item Total Price: {purchaseHistoryItem.total_price}</p>\n                                <p><img src= {purchaseHistoryItem.image} width=\"200px\" /></p>\n                            </div>\n                        )\n                    })\n                }\n\t\t\t</div>\n        )\n    }\n}\n\nexport default PurchaseHistoryComponent;\n","import React from 'react';\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setUser } from './redux/reducer';\nimport Header from './components/Header/Header';\nimport Landing from './components/Landing/Landing';\nimport AuthComponent from './components/Auth/AuthComponent';\nimport PurchaseHistoryComponent from './components/Purchase History/PurchaseHistoryComponent';\nimport InventoryComponent from './components/Inventory/InventoryComponent';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: 'Login'\n\t};\n\tthis.changeTitle = this.changeTitle.bind(this);\n  }\n\n  changeTitle(title) {\n    this.setState({\n      title: title\n    });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <Header title={this.state.title} user={this.props.user} />\n        <Switch>\n          <Route exact path='/' render={props => (\n            <Landing changeTitle={this.changeTitle} {...props}/>\n          )}\n          />\n          <Route path='/login-register' render={props => (\n            <AuthComponent changeTitle={this.changeTitle} {...props} />\n          )}\n          />\n          {this.props.user && (\n            <Route path='/inventory' render={props => (\n              <InventoryComponent changeTitle={this.changeTitle} {...props} />\n            )}\n            />\n          )}\n          {this.props.user && (\n            <Route path='/purchase_history' render={props => (\n              <PurchaseHistoryComponent changeTitle={this.changeTitle} {...props} />\n            )}\n            />\n          )}\n          <Route path='*' render={() => {\n            return <Redirect to='/inventory' />;\n          }}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nfunction mapReduxStateToProps (reduxState) {\n  return reduxState\n};\n\nconst mapDispatchToProps = {\n  setUser\n};\n\nconst invokedConnect = connect(mapReduxStateToProps, mapDispatchToProps);\n\nexport default invokedConnect(withRouter(App));\n\n\n\n\n\n// import React, {Component} from 'react';\n// import { setUser } from './redux/reducer';\n// import { connect } from 'react-redux';\n// import { Switch, Route, NavLink, withRouter } from 'react-router-dom';\n// import reducer from './redux/reducer';\n// import AuthComponent from './components/Auth/AuthComponent';\n// import PurchaseHistoryComponent from './components/Purchase History/PurchaseHistoryComponent';\n// import CartComponent from './components/Cart/CartComponent';\n// import InventoryComponent from './components/Inventory/InventoryComponent';\n// // import { getPurchaseHistory } from PurchaseHistoryComponent;\n// import axios from 'axios';\n// import logo from '../src/logo.jpg';\n// import API from './api';\n\n// class App extends Component {\n// \tconstructor(props) {\n// \t\tsuper(props);\n// \t\tthis.state = {\n// \t\t\tsearchQuery: \"\",\n// \t\t};\n// \t\tthis.searchInventory = this.searchInventory.bind(this);\n// \t}\n\n// \tcomponentDidMount() {\n//        console.log(this.props.user);\n// \t}\n\n// \tasync getSession() {\n// \t\tconst session = await axios.get(API.session);\n// \t\tthis.setState({ session: session.data })\n// \t}\n\n// \tasync searchInventory() {\n// \t\tconst { searchQuery } = this.state;\n// \t\tconst inventoryResponse = await axios.get(`${API.search}?query=${searchQuery}`);\n\n// \t\tthis.setState({ inventory: inventoryResponse.data })\n//     }\n    \n//     async logout() {\n//         const { session } = this.state;\n//         const destroyedSession = await axios.post(API.logout, {});\n    \n//         this.setState({ session: { email: \"\", user_id: null } });\n//     }\n\n// \trender() {\n//         const { session, inventory, searchQuery } = this.state;\n// \t\treturn (\n// \t\t\t<div className=\"app\">\n// \t\t\t\t<header className=\"header-class\">\n// \t\t\t\t\t<div className=\"header-left-corner\">\n// \t\t\t\t\t\t<div className=\"search-area\">\n// \t\t\t\t\t\t\t<form onSubmit={e => { e.preventDefault(); this.searchInventory(); }}>\n// \t\t\t\t\t\t\t\t<label>Search:</label>\n// \t\t\t\t\t\t\t\t<input value={searchQuery} onChange={(e) => { this.setState({ searchQuery: e.target.value }); }} />\n// \t\t\t\t\t\t\t\t<button>Search</button>\n// \t\t\t\t\t\t\t</form>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<div className='logo-links-flex'>\n// \t\t\t\t\t\t<div className='logo'>\n// \t\t\t\t\t\t\t<img src={logo} alt='logo' />\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<nav className='navlinks'>\n//                             <div className=\"navlink-buttons\">\n//                             <NavLink className=\"cart-navlink\" activeClassName=\"active\" exact to=\"/my_cart\">View Cart</NavLink>\n// \t\t\t\t\t\t\t<NavLink className=\"ph-navlink\"activeClassName=\"active\" exact to=\"/my_orders\">Purchase History</NavLink>\n//                             <NavLink className=\"products-navlink\" activeClassName=\"active\" exact to=\"/\">Products</NavLink>\n//                             </div>\n// \t\t\t\t\t\t</nav>\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<div className='header-right-corner'>\n//                         {this.props.user && (<div className=\"user-salutation\">{`Hi, ${this.props.user.email}`} <button onClick={() => this.logout()}>Log Out</button></div>)}\n// \t\t\t\t\t\t{!this.props.user && <NavLink to=\"/login\" className=\"login\">Login</NavLink>}\n// \t\t\t\t\t</div>\n// \t\t\t\t</header>\n\t\t\t\t\t\n// \t\t\t\t\t\t<Switch>\n//                             <Route exact path=\"/\" component={InventoryComponent}/>\n// \t\t\t\t\t\t\t<Route path=\"/login\" component={AuthComponent} />\n// \t\t\t\t\t\t\t<Route path=\"/my_orders\" component={PurchaseHistoryComponent} />\n//                             <Route path=\"/my_cart\" component={CartComponent} />\n// \t\t\t\t\t\t</Switch>\n// \t\t\t\t</div>\n//         )\n// \t}\n// }\n\n// function mapReduxStateToProps(reduxState) {\n//     return reduxState\n// }\n\n// const mapDispatchToProps = {\n//     setUser\n// }\n\n// const invokedConnect = connect(mapReduxStateToProps, mapDispatchToProps);\n\n// export default invokedConnect(withRouter(App));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport './App.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<HashRouter>\n\t\t\t<App />\n\t\t</HashRouter>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}